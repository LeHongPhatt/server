require("dotenv").config();
const UserModel = require("../models/userModel");
const bcrypt = require("bcrypt");
const asyncHandle = require("express-async-handler");
const jwt = require("jsonwebtoken");
const nodemailer = require("nodemailer");

const SECRET_KEY = "phathocgioi";
const transporter = nodemailer.createTransport({
  host: "smtp.gmail.com",
  port: 465,
  secure: true, // true for port 465, false for other ports
  auth: {
    user: "soc.sucao1@gmail.com",
    pass: "hipv odec hddq qime",
  },
});
const getJsonWebToken = async (email, id) => {
  const payload = {
    email,
    id,
  };

  const token = jwt.sign(payload, SECRET_KEY, {
    expiresIn: "7d",
  });
  return token;
};

const handleSendMail = async (val, email) => {
  try {
    await transporter.sendMail({
      from: '"Maddison Foo Koch üëª" <soc.sucao1@gmail.com>', // sender address
      to: email, // list of receivers
      subject: "Hello ‚úî", // Subject line
      text: "Hello world?", // plain text body
      html: `<h1>${val}<h1>`, // html body
    });
    return "OK";
  } catch (error) {
    return "Error";
  }
};
// handleSendMail("sssss");

const verification = asyncHandle(async (req, res) => {
  const { email } = req.body;
  const verificationCode = Math.round(1000 + Math.random() * 9000);
  try {
    await handleSendMail(verificationCode, email);
    res.status(200).json({
      message: "Verification email has been sent successfully",
      code: verificationCode,
    });
  } catch (error) {
    res.status(401);

    console.log("can not send email", error);
  }
});

const register = asyncHandle(async (req, res) => {
  const { email, fullname, password } = req.body;

  // Ki·ªÉm tra n·∫øu ng∆∞·ªùi d√πng ƒë√£ t·ªìn t·∫°i
  const existingUser = await UserModel.findOne({ email });
  if (existingUser) {
    res.status(401).json({ message: "User already exists" });
    return; // D·ª´ng l·∫°i n·∫øu user ƒë√£ t·ªìn t·∫°i
  }

  // M√£ h√≥a m·∫≠t kh·∫©u
  const salt = await bcrypt.genSalt(10);
  const hashPassword = await bcrypt.hash(password, salt);

  // T·∫°o ng∆∞·ªùi d√πng m·ªõi v·ªõi tr·∫°ng th√°i KYC l√† "pending"
  const newUser = new UserModel({
    email,
    fullname: fullname ?? "",
    password: hashPassword,
    kycStatus: "pending", // Th√™m tr∆∞·ªùng n√†y v√†o model User
  });

  // L∆∞u ng∆∞·ªùi d√πng v√†o database
  await newUser.save();

  // G·ª≠i ph·∫£n h·ªìi tr·∫£ v·ªÅ cho client
  res.status(200).json({
    message: "Register new user successfully !!!",
    data: {
      email: newUser.email,
      fullname: newUser.fullname,
      accesstoken: await getJsonWebToken(email, newUser.id),
      isProfileCompleted: false,
      kycStatus: newUser.kycStatus, // Tr·∫£ v·ªÅ tr·∫°ng th√°i KYC
    },
  });
});

const login = asyncHandle(async (req, res) => {
  const { email, password } = req.body;
  console.log("===login=  req ==", req.body);
  const existingUser = await UserModel.findOne({ email });
  if (!existingUser) {
    res.status(403).json({
      message: "User not found",
    });
    console("User not found !!!");
  }

  const isMatchPassWord = await bcrypt.compare(password, existingUser.password);
  if (!isMatchPassWord) {
    res.status(401).json({
      message: "Invalid password",
    });
    console("Invalid password!!!");
  }
  res.status(200).json({
    message: "Login successfully",
    data: {
      id: existingUser.id,
      email: existingUser.email,
      fullname: existingUser.fullname,
      accesstoken: await getJsonWebToken(email, existingUser.id),
    },
  });
});
const forgotPassWord = asyncHandle(async (req, res) => {
  const { email, newPassword, confirmPassword } = req.body;

  if (!email || !newPassword || !confirmPassword) {
    return res.status(400).json({ message: "Thi·∫øu th√¥ng tin." });
  }

  if (newPassword !== confirmPassword) {
    return res.status(400).json({ message: "M·∫≠t kh·∫©u x√°c nh·∫≠n kh√¥ng kh·ªõp." });
  }

  const user = await UserModel.findOne({ email });
  if (!user) {
    return res
      .status(404)
      .json({ message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng v·ªõi email n√†y." });
  }

  // T·∫°o m√£ OTP
  const otpCode = Math.round(1000 + Math.random() * 9000);
  const hashedNewPassword = await bcrypt.hash(newPassword, 10);

  // L∆∞u OTP v√† m·∫≠t kh·∫©u m·ªõi t·∫°m th·ªùi trong user ho·∫∑c b·∫£ng ri√™ng (tu·ª≥ design)
  user.resetPasswordOTP = otpCode;
  user.resetPasswordExpires = Date.now() + 10 * 60 * 1000; // 10 ph√∫t
  user.tempPassword = hashedNewPassword;
  await user.save();

  // G·ª≠i email ch·ª©a OTP
  const emailSent = await handleSendMail(otpCode, email);
  if (!emailSent) {
    return res
      .status(500)
      .json({ message: "Kh√¥ng th·ªÉ g·ª≠i m√£ OTP. Vui l√≤ng th·ª≠ l·∫°i." });
  }

  return res.status(200).json({
    otp: otpCode,
    message:
      "ƒê√£ g·ª≠i m√£ OTP t·ªõi email. Vui l√≤ng x√°c minh ƒë·ªÉ ho√†n t·∫•t thay ƒë·ªïi m·∫≠t kh·∫©u.",
  });
});

const resendOTP = asyncHandle(async (req, res) => {
  const { email } = req.body;

  if (!email) {
    return res.status(400).json({ message: "Email kh√¥ng ƒë∆∞·ª£c ƒë·ªÉ tr·ªëng." });
  }

  const user = await UserModel.findOne({ email });
  if (!user) {
    return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng." });
  }

  // Ki·ªÉm tra xem ng∆∞·ªùi d√πng ƒë√£ y√™u c·∫ßu qu√™n m·∫≠t kh·∫©u ch∆∞a
  if (!user.tempNewPassword) {
    return res.status(400).json({
      message: "Kh√¥ng c√≥ y√™u c·∫ßu kh√¥i ph·ª•c n√†o ƒëang ch·ªù x√°c minh.",
    });
  }

  // T·∫°o OTP m·ªõi
  const newOTP = Math.round(1000 + Math.random() * 9000);

  // C·∫≠p nh·∫≠t OTP m·ªõi v√† th·ªùi gian h·∫øt h·∫°n
  user.resetPasswordOTP = newOTP;
  user.resetPasswordOTPExpires = Date.now() + 10 * 60 * 1000; // 10 ph√∫t
  await user.save();

  const sent = await handleSendMail(
    res.status(200).json({
      message: "Verification email has been sent successfully",
      otp: newOTP,
    })
  );

  if (!sent) {
    return res.status(500).json({ message: "Kh√¥ng th·ªÉ g·ª≠i l·∫°i m√£ OTP." });
  }

  res.status(200).json({ message: "M√£ OTP m·ªõi ƒë√£ ƒë∆∞·ª£c g·ª≠i ƒë·∫øn email." });
});

const verifyResetPassword = asyncHandle(async (req, res) => {
  const { email, otp } = req.body; // L·∫•y email v√† OTP t·ª´ y√™u c·∫ßu
  const newPassword = req.body.newPassword; // L·∫•y m·∫≠t kh·∫©u m·ªõi t·ª´ tr∆∞·ªõc ƒë√≥ (ƒë√£ nh·∫≠p)

  // Ki·ªÉm tra email, OTP v√† m·∫≠t kh·∫©u m·ªõi
  if (!email || !otp || !newPassword) {
    return res.status(400).json({ message: "Missing required fields." });
  }

  try {
    // T√¨m ng∆∞·ªùi d√πng theo email
    const user = await UserModel.findOne({ email });

    // Ki·ªÉm tra n·∫øu ng∆∞·ªùi d√πng kh√¥ng t·ªìn t·∫°i
    if (!user) {
      return res.status(404).json({ message: "User not found." });
    }

    // Ki·ªÉm tra xem OTP c√≥ h·ª£p l·ªá kh√¥ng v√† ƒë√£ h·∫øt h·∫°n ch∆∞a
    if (
      user.resetPasswordOTP !== otp ||
      Date.now() > user.resetPasswordOTPExpires
    ) {
      return res.status(400).json({ message: "Invalid or expired OTP." });
    }

    // C·∫≠p nh·∫≠t m·∫≠t kh·∫©u m·ªõi
    user.password = await bcrypt.hash(newPassword, 10); // M√£ h√≥a m·∫≠t kh·∫©u
    user.resetPasswordOTP = undefined; // X√≥a OTP sau khi x√°c minh
    user.resetPasswordOTPExpires = undefined; // X√≥a th·ªùi gian h·∫øt h·∫°n
    await user.save();

    return res.status(200).json({
      status: "success", // ‚úÖ th√™m d√≤ng n√†y ƒë·ªÉ frontend check d·ªÖ
      message:
        "Password updated successfully. Please login with your new password.",
    });
  } catch (error) {
    console.error("Error during OTP verification and password update: ", error);
    return res.status(500).json({
      message: "An error occurred while processing your request.",
    });
  }
});

const LoginGoogle = asyncHandle(async (req, res) => {
  const userInfo = req.body;
  const existingUser = await UserModel.findOne({ email: userInfo.email });
  let user = { ...userInfo };
  if (existingUser) {
    if (existingUser) {
      await UserModel.findByIdAndUpdate(existingUser.id, {
        ...userInfo,
        updateAt: Date.now(),
      });
      console.log("Updated");

      user.accesstoken = await getJsonWebToken(userInfo.email, userInfo.id);
    }
  } else {
    const newUser = new UserModel({
      email: userInfo.email,
      fullname: userInfo.name,
      ...userInfo,
    });
    await newUser.save();
    console.log("Saved");
    user.accesstoken = await getJsonWebToken(userInfo.email, newUser.id);
  }
  res.status(200).json({
    message: "Login google successfully",
    data: user,
  });
});

const updateKycProfile = async (req, res) => {
  try {
    const { username, displayName, bio, interests, location } = req.body;
    const userId = req.user?.id || req.body.id;

    if (!username || !displayName) {
      return res
        .status(400)
        .json({ message: "Username v√† displayName l√† b·∫Øt bu·ªôc." });
    }

    const existingUserWithUsername = await UserModel.findOne({ username });

    if (
      existingUserWithUsername &&
      existingUserWithUsername._id.toString() !== userId
    ) {
      return res.status(409).json({
        message: "Username ƒë√£ t·ªìn t·∫°i.",
        existingUserId: existingUserWithUsername._id,
      });
    }

    // T·∫°o object update ch·ªâ ch·ª©a c√°c tr∆∞·ªùng c√≥ gi√° tr·ªã
    const updateFields = {
      username,
      displayName,
      isProfileCompleted: true,
      kycStatus: "approved", // N·∫øu mu·ªën x√°c nh·∫≠n KYC th√†nh c√¥ng
    };
    if (bio !== undefined) updateFields.bio = bio;
    if (interests !== undefined) updateFields.interests = interests;
    if (location !== undefined) updateFields.location = location;

    const updatedUser = await UserModel.findByIdAndUpdate(
      userId,
      updateFields,
      { new: true }
    );

    if (!updatedUser) {
      return res.status(404).json({ message: "Kh√¥ng t√¨m th·∫•y ng∆∞·ªùi d√πng." });
    }

    // T·∫°o token m·ªõi v·ªõi th√¥ng tin c·∫≠p nh·∫≠t
    const accesstoken = await getJsonWebToken(updatedUser.email, updatedUser._id);

    // T·∫°o object response kh√¥ng ch·ª©a c√°c tr∆∞·ªùng nh·∫°y c·∫£m
    const userResponse = {
      _id: updatedUser._id,
      email: updatedUser.email,
      username: updatedUser.username,
      displayName: updatedUser.displayName,
      bio: updatedUser.bio,
      interests: updatedUser.interests,
      location: updatedUser.location,
      isProfileCompleted: updatedUser.isProfileCompleted,
      kycStatus: updatedUser.kycStatus,
      createAt: updatedUser.createAt,
      updateAt: updatedUser.updateAt,
    };

    return res.status(200).json({
      message: "Th√¥ng tin c√° nh√¢n ƒë√£ ƒë∆∞·ª£c c·∫≠p nh·∫≠t th√†nh c√¥ng.",
      data: {
        ...userResponse,
        accesstoken,
      },
    });
  } catch (error) {
    console.error("Error updating KYC profile:", error);
    return res
      .status(500)
      .json({ message: "ƒê√£ c√≥ l·ªói x·∫£y ra. Vui l√≤ng th·ª≠ l·∫°i." });
  }
};

module.exports = {
  register,
  login,
  verification,
  forgotPassWord,
  LoginGoogle,
  verifyResetPassword,
  resendOTP,
  updateKycProfile,
};
